{"version":3,"sources":["components/Tile/Tile.tsx","Constant.ts","referee/rules/GeneralRules.ts","referee/Referee.ts","referee/rules/PawnRules.ts","referee/rules/KnightRules.ts","referee/rules/BishopRules.ts","referee/rules/RookRules.ts","referee/rules/QueenRules.ts","referee/rules/KingRules.ts","components/Chessboard/Chessboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tile","_ref","number","image","react_default","a","createElement","className","style","backgroundImage","concat","PieceType","TeamType","HORIZONTAL_AXIS","VERTICAL_AXIS","GRID_SIZE","samePosittion","p1","p2","x","y","initialBoardState","position","type","ROOK","team","OPPONENT","KNIGHT","BISHOP","QUEEN","KING","PAWN","OUR","tileIsOccupied","boardState","find","p","TileIsOccupiedByOpponent","tileIsEmptyOrOccupiedByOpponent","Referee","initialPosition","desiredPosition","pawnDirection","enPassant","validMove","specialRow","pawnMove","i","j","knightMove","passedPosition","bishopMove","multiplier","rookMove","multiplierX","multiplierY","queenMove","kingMove","Chessboard","_useState","useState","_useState2","Object","slicedToArray","activePiece","setActivePiece","_useState3","_useState4","grabPosition","setGrabPosition","_useState5","_useState6","pieces","setPieces","chessboardRef","useRef","referee","board","_loop","_loop2","piece","undefined","push","Tile_Tile","key","length","onMouseUp","e","chessboard","current","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","currentPiece","isValidMove","isEnPassantMove","updatedPieces","reduce","results","removeProperty","dropPiece","onMouseMove","minX","minY","maxX","clientWidth","maxY","clientHeight","left","top","movePiece","onMouseDown","element","target","classList","contains","grabX","grabY","grabPiece","id","ref","App","Chessboard_Chessboard","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.12a66867.chunk.js","sourcesContent":["import \"./Tile.css\";\r\nimport React from 'react';\r\ninterface Props {\r\n    image?: string;\r\n    number: number\r\n}\r\n\r\nexport default function Tile({ number, image }: Props) {\r\n\r\n    if (number % 2 === 0) {\r\n        return <div className=\"title black-tile\">\r\n            {image && <div style={{ backgroundImage: `url(${image})` }} className=\"chess-piece\"> </div>}\r\n        </div>\r\n    }\r\n    else {\r\n\r\n        return <div className=\"title white-tile\">\r\n            {image && <div style={{ backgroundImage: `url(${image})` }} className=\"chess-piece\"> </div>}\r\n        </div>\r\n    }\r\n\r\n}","export const HORIZONTAL_AXIS = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\nexport const VERTICAL_AXIS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\nexport const GRID_SIZE = 62.5;\r\nexport function samePosittion(p1: Posiion, p2: Posiion) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\nexport { }\r\nexport enum PieceType {\r\n    PAWN,\r\n    BISHOP,\r\n    KNIGHT,\r\n    ROOK,\r\n    QUEEN,\r\n    KING\r\n}\r\n\r\nexport enum TeamType {\r\n    OPPONENT,\r\n    OUR\r\n}\r\nexport interface Posiion {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport interface Piece {\r\n    image: string;\r\n    position: Posiion;\r\n    type: PieceType;\r\n    team: TeamType;\r\n    enPassant?: boolean;\r\n}\r\n\r\nexport const initialBoardState: Piece[] = [\r\n    { image: `assets/rook_b.png`, position: { x: 0, y: 7 }, type: PieceType.ROOK, team: TeamType.OPPONENT },\r\n    { image: `assets/knight_b.png`, position: { x: 1, y: 7 }, type: PieceType.KNIGHT, team: TeamType.OPPONENT },\r\n    { image: `assets/bishop_b.png`, position: { x: 2, y: 7 }, type: PieceType.BISHOP, team: TeamType.OPPONENT },\r\n    { image: `assets/queen_b.png`, position: { x: 3, y: 7 }, type: PieceType.QUEEN, team: TeamType.OPPONENT },\r\n    { image: `assets/king_b.png`, position: { x: 4, y: 7 }, type: PieceType.KING, team: TeamType.OPPONENT },\r\n    { image: `assets/bishop_b.png`, position: { x: 5, y: 7 }, type: PieceType.BISHOP, team: TeamType.OPPONENT },\r\n    { image: `assets/knight_b.png`, position: { x: 6, y: 7 }, type: PieceType.KNIGHT, team: TeamType.OPPONENT },\r\n    { image: `assets/rook_b.png`, position: { x: 7, y: 7 }, type: PieceType.ROOK, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 0, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 1, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 2, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 3, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 4, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 5, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 6, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n    { image: `assets/pawn_b.png`, position: { x: 7, y: 6 }, type: PieceType.PAWN, team: TeamType.OPPONENT },\r\n\r\n\r\n\r\n    { image: `assets/rook_w.png`, position: { x: 0, y: 0 }, type: PieceType.ROOK, team: TeamType.OUR },\r\n    { image: `assets/knight_w.png`, position: { x: 1, y: 0 }, type: PieceType.KNIGHT, team: TeamType.OUR },\r\n    { image: `assets/bishop_w.png`, position: { x: 2, y: 0 }, type: PieceType.BISHOP, team: TeamType.OUR },\r\n    { image: `assets/queen_w.png`, position: { x: 3, y: 0 }, type: PieceType.QUEEN, team: TeamType.OUR },\r\n    { image: `assets/king_w.png`, position: { x: 4, y: 0 }, type: PieceType.KING, team: TeamType.OUR },\r\n    { image: `assets/bishop_w.png`, position: { x: 5, y: 0 }, type: PieceType.BISHOP, team: TeamType.OUR },\r\n    { image: `assets/knight_w.png`, position: { x: 6, y: 0 }, type: PieceType.KNIGHT, team: TeamType.OUR },\r\n    { image: `assets/rook_w.png`, position: { x: 7, y: 0 }, type: PieceType.ROOK, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 0, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 1, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 2, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 3, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 4, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 5, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 6, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n    { image: `assets/pawn_w.png`, position: { x: 7, y: 1 }, type: PieceType.PAWN, team: TeamType.OUR },\r\n];\r\n","import { Piece, Posiion, samePosittion, TeamType } from \"../../Constant\";\r\nexport { }\r\nexport const tileIsOccupied = (position: Posiion, boardState: Piece[]): boolean => {\r\n\r\n    const piece = boardState.find(p => samePosittion(p.position, position));\r\n\r\n    if (piece) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const TileIsOccupiedByOpponent = (position: Posiion, boardState: Piece[], team: TeamType): boolean => {\r\n\r\n    const piece = boardState.find(p => samePosittion(p.position, position) && p.team !== team);\r\n    if (piece) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const tileIsEmptyOrOccupiedByOpponent = (position: Posiion, boardState: Piece[], team: TeamType) => {\r\n    return !tileIsOccupied(position, boardState) || TileIsOccupiedByOpponent(position, boardState, team);\r\n}","import { PieceType, TeamType, Piece, Posiion } from \"../Constant\";\r\nimport { bishopMove } from \"./rules/BishopRules\";\r\nimport { kingMove } from \"./rules/KingRules\";\r\nimport { knightMove } from \"./rules/KnightRules\";\r\nimport { pawnMove } from \"./rules/PawnRules\";\r\nimport { queenMove } from \"./rules/QueenRules\";\r\nimport { rookMove } from \"./rules/RookRules\";\r\n\r\nexport default class Referee {\r\n\r\n\r\n\r\n    isEnPassantMove(initialPosition: Posiion, desiredPosition: Posiion, type: PieceType, team: TeamType, boardState: Piece[]) {\r\n        const pawnDirection = (team === TeamType.OUR) ? 1 : -1;\r\n\r\n        if (type === PieceType.PAWN) {\r\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\r\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\r\n                if (piece) {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    isValidMove(initialPosition: Posiion, desiredPosition: Posiion, type: PieceType, team: TeamType, boardState: Piece[]) {\r\n        let validMove = false;\r\n        switch (type) {\r\n            case PieceType.PAWN:\r\n                validMove = pawnMove(initialPosition, desiredPosition, team, boardState);\r\n                break;\r\n            case PieceType.KNIGHT:\r\n                validMove = knightMove(initialPosition, desiredPosition, team, boardState);\r\n                break;\r\n            case PieceType.BISHOP:\r\n                validMove = bishopMove(initialPosition, desiredPosition, team, boardState);\r\n                break;\r\n            case PieceType.ROOK:\r\n                validMove = rookMove(initialPosition, desiredPosition, team, boardState);\r\n                break;\r\n            case PieceType.QUEEN:\r\n                validMove = queenMove(initialPosition, desiredPosition, team, boardState);\r\n                break;\r\n            case PieceType.KING:\r\n                validMove = kingMove(initialPosition, desiredPosition, team, boardState);\r\n        }\r\n        return validMove;\r\n    }\r\n}","import { Piece, Posiion, TeamType } from \"../../Constant\";\r\nimport { tileIsOccupied, TileIsOccupiedByOpponent } from \"./GeneralRules\";\r\n\r\nexport const pawnMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n    const specialRow = (team === TeamType.OUR) ? 1 : 6;\r\n    const pawnDirection = (team === TeamType.OUR) ? 1 : -1;\r\n\r\n    if (initialPosition.x === desiredPosition.x && initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\r\n        if (!tileIsOccupied(desiredPosition, boardState) && !tileIsOccupied({ x: desiredPosition.x, y: desiredPosition.y - pawnDirection }, boardState)) {\r\n            return true;\r\n        }\r\n    } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\r\n        if (!tileIsOccupied(desiredPosition, boardState)) {\r\n            return true;\r\n        }\r\n    }\r\n    //attack logic\r\n    else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection) { //attack in upper or bottom left corners\r\n\r\n        if (TileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\r\n            return true;\r\n        }\r\n    } else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection) { //attack in upper or bottom right corner\r\n        if (TileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import { Piece, Posiion, TeamType } from \"../../Constant\";\r\nimport { tileIsEmptyOrOccupiedByOpponent } from \"./GeneralRules\";\r\nexport { }\r\nexport const knightMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n\r\n    for (let i = -1; i < 2; i += 2) {\r\n        for (let j = -1; j < 2; j += 2) {\r\n            if (desiredPosition.y - initialPosition.y === 2 * i) {\r\n                if (desiredPosition.x - initialPosition.x === j) {\r\n                    if (tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (desiredPosition.x - initialPosition.x === 2 * i) {\r\n                if (desiredPosition.y - initialPosition.y === j) {\r\n                    if (tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import { Piece, Posiion, samePosittion, TeamType } from \"../../Constant\";\r\nimport { tileIsEmptyOrOccupiedByOpponent, tileIsOccupied } from \"./GeneralRules\";\r\nexport { }\r\nexport const bishopMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n\r\n    for (let i = 1; i < 8; i++) {\r\n        //TOP right \r\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\r\n\r\n            let passedPosition: Posiion = { x: initialPosition.x + i, y: initialPosition.y + i };\r\n\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //BOTTOM RIGHT\r\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\r\n\r\n            let passedPosition: Posiion = { x: initialPosition.x + i, y: initialPosition.y - i };\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //bottom left\r\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\r\n\r\n            let passedPosition: Posiion = { x: initialPosition.x - i, y: initialPosition.y - i };\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        //top left \r\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\r\n\r\n            let passedPosition: Posiion = { x: initialPosition.x - i, y: initialPosition.y + i };\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import { Piece, Posiion, samePosittion, TeamType } from \"../../Constant\";\r\nimport { tileIsEmptyOrOccupiedByOpponent, tileIsOccupied } from \"./GeneralRules\";\r\nexport { }\r\nexport const rookMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n\r\n    if (initialPosition.x === desiredPosition.x) {\r\n\r\n        for (let i = 1; i < 8; i++) {\r\n\r\n            let multiplier = (desiredPosition.y < initialPosition.y) ? -1 : 1;\r\n            let passedPosition: Posiion = { x: initialPosition.x, y: initialPosition.y + (i * multiplier) };\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (initialPosition.y === desiredPosition.y) {\r\n        for (let i = 1; i < 8; i++) {\r\n\r\n            let multiplier = (desiredPosition.x < initialPosition.x) ? -1 : 1;\r\n            let passedPosition: Posiion = { x: initialPosition.x + (i * multiplier), y: initialPosition.y };\r\n            if (samePosittion(passedPosition, desiredPosition)) {\r\n                if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (tileIsOccupied(passedPosition, boardState)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import { Piece, Posiion, samePosittion, TeamType } from \"../../Constant\";\r\nimport { tileIsEmptyOrOccupiedByOpponent, tileIsOccupied } from \"./GeneralRules\";\r\n\r\nexport const queenMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n\r\n    for (let i = 1; i < 8; i++) {\r\n        //Diagonal \r\n\r\n        let multiplierX = (desiredPosition.x < initialPosition.x) ? -1 : (desiredPosition.x > initialPosition.x) ? 1 : 0;\r\n        let multiplierY = (desiredPosition.y < initialPosition.y) ? -1 : (desiredPosition.y > initialPosition.y) ? 1 : 0;\r\n        let passedPosition: Posiion = { x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY) };\r\n        if (samePosittion(passedPosition, desiredPosition)) {\r\n            if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            if (tileIsOccupied(passedPosition, boardState)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import { Piece, Posiion, samePosittion, TeamType } from \"../../Constant\";\r\nimport { tileIsEmptyOrOccupiedByOpponent, tileIsOccupied } from \"./GeneralRules\";\r\nexport { }\r\nexport const kingMove = (initialPosition: Posiion, desiredPosition: Posiion, team: TeamType, boardState: Piece[]): boolean => {\r\n\r\n    for (let i = 1; i < 2; i++) {\r\n        //Diagonal \r\n\r\n        let multiplierX = (desiredPosition.x < initialPosition.x) ? -1 : (desiredPosition.x > initialPosition.x) ? 1 : 0;\r\n        let multiplierY = (desiredPosition.y < initialPosition.y) ? -1 : (desiredPosition.y > initialPosition.y) ? 1 : 0;\r\n        let passedPosition: Posiion = { x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY) };\r\n        if (samePosittion(passedPosition, desiredPosition)) {\r\n            if (tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            if (tileIsOccupied(passedPosition, boardState)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}","import React, { useRef, useState } from \"react\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport \"./Chessboard.css\";\r\nimport Referee from \"../../referee/Referee\";\r\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, PieceType, TeamType, initialBoardState, Posiion, samePosittion } from \"../../Constant\";\r\n\r\nexport default function Chessboard() {\r\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\r\n    const [grabPosition, setGrabPosition] = useState<Posiion>({ x: -1, y: -1 });\r\n    const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\r\n    const chessboardRef = useRef<HTMLDivElement>(null);\r\n    const referee = new Referee();\r\n\r\n    function grabPiece(e: React.MouseEvent) {\r\n\r\n        const element = e.target as HTMLElement;\r\n        const chessboard = chessboardRef.current;\r\n        if (element.classList.contains(\"chess-piece\") && chessboard) {\r\n\r\n            const grabX = Math.floor(((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\r\n            const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\r\n            setGrabPosition({ x: grabX, y: grabY });\r\n\r\n\r\n            const x = e.clientX - 20;\r\n            const y = e.clientY - 20;\r\n            element.style.position = \"absolute\";\r\n            element.style.left = `${x}px`;\r\n            element.style.top = `${y}px`;\r\n\r\n            setActivePiece(element);\r\n        }\r\n\r\n    }\r\n\r\n    function movePiece(e: React.MouseEvent) {\r\n        const chessboard = chessboardRef.current;\r\n        if (activePiece && chessboard) {\r\n\r\n\r\n            const minX = chessboard.offsetLeft;\r\n            const minY = chessboard.offsetTop;\r\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 45;\r\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - 45;\r\n\r\n            const x = e.clientX - 20;\r\n            const y = e.clientY - 20;\r\n            activePiece.style.position = \"absolute\";\r\n\r\n            if (x < minX) {\r\n                activePiece.style.left = `${minX}px`;\r\n            }\r\n            else if (x > maxX) {\r\n                activePiece.style.left = `${maxX}px`\r\n            }\r\n            else {\r\n                activePiece.style.left = `${x}px`;\r\n            }\r\n\r\n            if (y < minY) {\r\n                activePiece.style.top = `${minY}px`;\r\n            }\r\n            else if (y > maxY) {\r\n                activePiece.style.top = `${maxY}px`\r\n            }\r\n            else {\r\n                activePiece.style.top = `${y}px`;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function dropPiece(e: React.MouseEvent) {\r\n\r\n        const chessboard = chessboardRef.current;\r\n        if (activePiece && chessboard) {\r\n            const x = Math.floor(((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\r\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 500) / GRID_SIZE));\r\n\r\n            const currentPiece = pieces.find(p => samePosittion(p.position, grabPosition));\r\n            if (currentPiece) {\r\n                const validMove = referee.isValidMove(grabPosition, { x, y }, currentPiece.type, currentPiece.team, pieces);\r\n\r\n                const isEnPassantMove = referee.isEnPassantMove(grabPosition, { x, y }, currentPiece.type, currentPiece.team, pieces);\r\n                const pawnDirection = (currentPiece.team === TeamType.OUR) ? 1 : -1;\r\n\r\n                if (isEnPassantMove) {\r\n                    const updatedPieces = pieces.reduce((results, piece) => {\r\n\r\n                        if (samePosittion(piece.position, grabPosition)) {\r\n\r\n                            piece.enPassant = false;\r\n                            piece.position.x = x;\r\n                            piece.position.y = y;\r\n                            results.push(piece);\r\n                        } else if (!samePosittion(piece.position, { x, y: y - pawnDirection })) {\r\n                            if (piece.type === PieceType.PAWN) {\r\n                                piece.enPassant = false;\r\n                            }\r\n                            results.push(piece);\r\n                        }\r\n\r\n                        return results;\r\n                    }, [] as Piece[])\r\n                    setPieces(updatedPieces);\r\n\r\n                } else if (validMove) { //update the piece postion\r\n                    const updatedPieces = pieces.reduce((results, piece) => {\r\n                        if (samePosittion(piece.position, grabPosition)) {\r\n                            piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\r\n                            piece.position.x = x;\r\n                            piece.position.y = y;\r\n\r\n\r\n                            results.push(piece);\r\n                        } else if (!samePosittion(piece.position, { x, y })) {\r\n                            if (piece.type === PieceType.PAWN) {\r\n                                piece.enPassant = false;\r\n                            }\r\n                            results.push(piece);\r\n                        }\r\n                        return results;\r\n\r\n                    }, [] as Piece[]);\r\n                    setPieces(updatedPieces);\r\n                } else {\r\n                    activePiece.style.position = 'relative';\r\n                    activePiece.style.removeProperty(\"top\");\r\n                    activePiece.style.removeProperty(\"left\");\r\n                }\r\n            }\r\n            setActivePiece(null);\r\n        }\r\n    }\r\n\r\n    let board = [];\r\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\r\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\r\n            const number = j + i + 2;\r\n            const piece = pieces.find(p => samePosittion(p.position, { x: i, y: j }))\r\n            let image = piece ? piece.image : undefined;\r\n\r\n            board.push(<Tile key={`${j}, ${i}`} image={image} number={number} />);\r\n\r\n        }\r\n    }\r\n    return <div onMouseUp={(e) => dropPiece(e)} onMouseMove={(e) => movePiece(e)} onMouseDown={e => grabPiece(e)} id=\"chessboard\" ref={chessboardRef}>{board}</div>\r\n}","import './App.css';\nimport React from 'react';\nimport Chessboard from './components/Chessboard/Chessboard';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}